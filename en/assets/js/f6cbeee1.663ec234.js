"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3836],{74641:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"express-basic-auth-swagger-doc","metadata":{"permalink":"/en/blog/express-basic-auth-swagger-doc","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-12-28/index.mdx","title":"Securing Swagger Documentation with express-basic-auth in Nodejs - Nestjs | Code \u0111\u1ee7 th\u1ee9","description":"B\u1ea3o m\u1eadt Swagger Document trong d\u1ef1 \xe1n Nodejs v\xe0 Nestjs - Trong b\xe0i vi\u1ebft n\xe0y m\xecnh s\u1ebd h\u01b0\u1edbng d\u1eabn b\u1ea1n b\u1ea3o m\u1eadt API Swagger document trong Nodejs v\xe0 Nestjs","date":"2023-12-28T00:00:00.000Z","formattedDate":"December 28, 2023","tags":[{"label":"typescript","permalink":"/en/blog/tags/typescript"},{"label":"nodejs","permalink":"/en/blog/tags/nodejs"},{"label":"nestjs","permalink":"/en/blog/tags/nestjs"},{"label":"swagger","permalink":"/en/blog/tags/swagger"}],"readingTime":2.37,"hasTruncateMarker":true,"authors":[{"name":"Ph\u1ea1m Quy\u1ebft Th\u1eafng","title":"Fullstack developer","url":"https://github.com/phamquyetthang","imageURL":"https://avatars.githubusercontent.com/u/43201625?s=400&u=9fa24ddfe492d15ba4692d4b295a5a2ef6b9ce24&v=4","key":"thang"}],"frontMatter":{"title":"Securing Swagger Documentation with express-basic-auth in Nodejs - Nestjs | Code \u0111\u1ee7 th\u1ee9","description":"B\u1ea3o m\u1eadt Swagger Document trong d\u1ef1 \xe1n Nodejs v\xe0 Nestjs - Trong b\xe0i vi\u1ebft n\xe0y m\xecnh s\u1ebd h\u01b0\u1edbng d\u1eabn b\u1ea1n b\u1ea3o m\u1eadt API Swagger document trong Nodejs v\xe0 Nestjs","slug":"express-basic-auth-swagger-doc","authors":"thang","tags":["typescript","nodejs","nestjs","swagger"],"image":"https://raw.githubusercontent.com/phamquyetthang/thang-blog/master/blog/2023-12-28/28.webp","hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Hello World in 20 Programming Languages","permalink":"/en/blog/hello-world-trong-20-ngon-ngu-lap-trinh-pho-bien"}},"content":"Swagger is a powerful tool for creating and managing API documentation. However, securing Swagger documents is crucial to ensure that sensitive information is not exposed. In this article, we will explore how to use the express-basic-auth library to protect Swagger documentation pages in JavaScript and TypeScript projects. We will focus on two cases: a regular JavaScript/TypeScript project and a NestJS project with @nestjs/swagger.\\n\\nAfter implementation, a user/password input form will appear when accessing the document page, and the correct credentials must be entered to view the document:\\n<img  src={require(\'./basic-auth-1.png\').default} alt=\\"Basic auth\\" style={{height: 300}} />\\n{/* truncate */}\\n\\n## 1. Install the express-basic-auth library\\n\\nFirst, we need to install the express-basic-auth library. For regular JavaScript/TypeScript projects, you can run the following command:\\n\\n```bash\\nnpm install express-basic-auth\\n```\\n\\nIf you are using TypeScript, add types for express-basic-auth:\\n\\n```bash\\nnpm install --save-dev @types/express-basic-auth\\n```\\n\\n## 2. Secure Swagger Document Page in JavaScript/TypeScript Projects\\n\\nJavaScript\\n\\n```javascript\\n// app.js\\nconst express = require(\\"express\\");\\nconst basicAuth = require(\\"express-basic-auth\\");\\nconst swaggerUi = require(\\"swagger-ui-express\\");\\nconst swaggerDocument = require(\\"./swagger.json\\");\\n\\nconst app = express();\\n\\n// Secure Swagger page with express-basic-auth\\nconst users = { admin: \\"password123\\" };\\napp.use(\\n  \\"/api-docs\\",\\n  basicAuth({ users, challenge: true }),\\n  swaggerUi.serve,\\n  swaggerUi.setup(swaggerDocument)\\n);\\n\\n// Other routes and middleware of the application\\n// ...\\n\\nconst PORT = process.env.PORT || 3000;\\napp.listen(PORT, () => {\\n  console.log(`Server is running on port ${PORT}`);\\n});\\n```\\n\\nTypeScript\\n\\n```typescript\\n// app.ts\\nimport express from \\"express\\";\\nimport basicAuth from \\"express-basic-auth\\";\\nimport swaggerUi from \\"swagger-ui-express\\";\\nimport swaggerDocument from \\"./swagger.json\\";\\n\\nconst app = express();\\n\\n// Secure Swagger page with express-basic-auth\\nconst users = { admin: \\"password123\\" };\\napp.use(\\n  \\"/api-docs\\",\\n  basicAuth({ users, challenge: true }),\\n  swaggerUi.serve,\\n  swaggerUi.setup(swaggerDocument)\\n);\\n\\n// Other routes and middleware of the application\\n// ...\\n\\nconst PORT = process.env.PORT || 3000;\\napp.listen(PORT, () => {\\n  console.log(`Server is running on port ${PORT}`);\\n});\\n```\\n#### ``` challenge: true ``` You need to pass this parameter to express-basic-auth to display the login prompt.\\nUsersname is ```admin```\\\\\\npassword is ```password123```\\n## 3. Secure Swagger Document Page in NestJS Project\\n\\nFor NestJS projects, we can use express-basic-auth in the main.ts file of the application.\\n\\n```typescript\\n// main.ts\\nimport { NestFactory } from \\"@nestjs/core\\";\\nimport { SwaggerModule, DocumentBuilder } from \\"@nestjs/swagger\\";\\nimport * as basicAuth from \\"express-basic-auth\\";\\nimport { AppModule } from \\"./app.module\\";\\n\\nasync function bootstrap() {\\n  const app = await NestFactory.create(AppModule);\\n\\n  // Secure Swagger page with express-basic-auth\\n  const users = { admin: \\"password123\\" };\\n  app.use(\\"/api-docs\\", basicAuth({ users, challenge: true }));\\n\\n  const options = new DocumentBuilder()\\n    .setTitle(\\"Your API\\")\\n    .setDescription(\\"API documentation\\")\\n    .setVersion(\\"1.0\\")\\n    .build();\\n  const document = SwaggerModule.createDocument(app, options);\\n  SwaggerModule.setup(\\"api-docs\\", app, document);\\n\\n  const PORT = process.env.PORT || 3000;\\n  await app.listen(PORT);\\n}\\nbootstrap();\\n```\\n\\n## Conclusion\\n\\nThat\'s how you can secure the Swagger document page in JavaScript and TypeScript projects using the express-basic-auth library. With this article, you can apply a similar approach in your projects to ensure that your API documentation is securely protected."},{"id":"hello-world-trong-20-ngon-ngu-lap-trinh-pho-bien","metadata":{"permalink":"/en/blog/hello-world-trong-20-ngon-ngu-lap-trinh-pho-bien","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-12-23-hello-world-20-ngon-ngu/index.md","title":"Hello World in 20 Programming Languages","description":"Hello World Python | Hello World Java | Hello World C++ | Hello World PHP | Hello World Javascript | Hello World C#","date":"2023-12-23T00:00:00.000Z","formattedDate":"December 23, 2023","tags":[{"label":"fun-code","permalink":"/en/blog/tags/fun-code"},{"label":"hello world","permalink":"/en/blog/tags/hello-world"},{"label":"typescript","permalink":"/en/blog/tags/typescript"},{"label":"nodejs","permalink":"/en/blog/tags/nodejs"},{"label":"nestjs","permalink":"/en/blog/tags/nestjs"},{"label":"godot","permalink":"/en/blog/tags/godot"}],"readingTime":1.83,"hasTruncateMarker":true,"authors":[{"name":"Ph\u1ea1m Quy\u1ebft Th\u1eafng","title":"Fullstack developer","url":"https://github.com/phamquyetthang","imageURL":"https://avatars.githubusercontent.com/u/43201625?s=400&u=9fa24ddfe492d15ba4692d4b295a5a2ef6b9ce24&v=4","key":"thang"}],"frontMatter":{"title":"Hello World in 20 Programming Languages","description":"Hello World Python | Hello World Java | Hello World C++ | Hello World PHP | Hello World Javascript | Hello World C#","slug":"hello-world-trong-20-ngon-ngu-lap-trinh-pho-bien","authors":"thang","tags":["fun-code","hello world","typescript","nodejs","nestjs","godot"],"image":"https://raw.githubusercontent.com/phamquyetthang/thang-blog/master/blog/2023-12-23-hello-world-20-ngon-ngu/hello.png","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Securing Swagger Documentation with express-basic-auth in Nodejs - Nestjs | Code \u0111\u1ee7 th\u1ee9","permalink":"/en/blog/express-basic-auth-swagger-doc"},"nextItem":{"title":"React - Uploading Images and Videos in React Quill using Cloudinary","permalink":"/en/blog/react-upload-anh-va-video-trong-rich-text-editor"}},"content":"\x3c!-- truncate --\x3e\\r\\n\\r\\nCertainly, each of us has started programming with the classic \\"Hello, World!\\" program. It\'s a small but crucial step that helps you get familiar with the basic syntax of a new programming language. In this article, let\'s explore how \\"Hello, World!\\" is written in 20 popular programming languages (Java, C#, Python, JavaScript, PHP, ...).\\r\\n\\r\\n![Image](./hello.png)\\r\\n\\r\\n## 1. Python:\\r\\n### \\"Hello, world\\" Python\\r\\n```python\\r\\nprint(\\"Hello, World!\\")\\r\\n```\\r\\n\\r\\n## 2. Java\\r\\n### \\"Hello, world\\" Java\\r\\n```java\\r\\npublic class HelloWorld {\\r\\n    public static void main(String[] args) {\\r\\n        System.out.println(\\"Hello, World!\\");\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## 3. JavaScript:\\r\\n### \\"Hello, world\\" JavaScript\\r\\n```javascript\\r\\nconsole.log(\\"Hello, World!\\");\\r\\n```\\r\\n## 4. C:\\r\\n### \\"Hello, world\\" C\\r\\n```c\\r\\n#include <stdio.h>\\r\\nint main() {\\r\\n    printf(\\"Hello, World!\\\\n\\");\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n## 5. C++:\\r\\n### \\"Hello, world\\" C++\\r\\n```cpp\\r\\n#include <iostream>\\r\\nusing namespace std;\\r\\nint main() {\\r\\n    cout << \\"Hello, World!\\" << endl;\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n## 6. C#:\\r\\n### \\"Hello, world\\" C#\\r\\n```csharp\\r\\nusing System;\\r\\nclass HelloWorld {\\r\\n    static void Main() {\\r\\n        Console.WriteLine(\\"Hello, World!\\");\\r\\n    }\\r\\n}\\r\\n```\\r\\n## 7. Ruby:\\r\\n### \\"Hello, world\\" Ruby\\r\\n```ruby\\r\\nputs \\"Hello, World!\\"\\r\\n```\\r\\n## 8. PHP:\\r\\n### \\"Hello, world\\" PHP\\r\\n```php\\r\\n<?php\\r\\necho \\"Hello, World!\\";\\r\\n?>\\r\\n```\\r\\n## 9. Swift:\\r\\n### \\"Hello, world\\" Swift\\r\\n```swift\\r\\nprint(\\"Hello, World!\\")\\r\\n```\\r\\n## 10. Go:\\r\\n### \\"Hello, world\\" Go\\r\\n```go\\r\\npackage main\\r\\nimport \\"fmt\\"\\r\\nfunc main() {\\r\\n    fmt.Println(\\"Hello, World!\\")\\r\\n}\\r\\n```\\r\\n\\r\\n## 11. Kotlin:\\r\\n### \\"Hello, world\\" Kotlin\\r\\n```kotlin\\r\\nfun main() {\\r\\n    println(\\"Hello, World!\\")\\r\\n}\\r\\n```\\r\\n## 12. Rust:\\r\\n### \\"Hello, world\\" Rust\\r\\n```rust\\r\\nfn main() {\\r\\n    println!(\\"Hello, World!\\");\\r\\n}\\r\\n```\\r\\n## 13. TypeScript:\\r\\n### \\"Hello, world\\" TypeScript\\r\\n```typescript\\r\\nconsole.log(\\"Hello, World!\\");\\r\\n```\\r\\n## 14. Dart:\\r\\n### \\"Hello, world\\" Dart\\r\\n```dart\\r\\nvoid main() {\\r\\n  print(\\"Hello, World!\\");\\r\\n}\\r\\n```\\r\\n## 15. Objective-C:\\r\\n### \\"Hello, world\\" Objective-C\\r\\n```objective\\r\\n#import <Foundation/Foundation.h>\\r\\nint main() {\\r\\n    NSLog(@\\"Hello, World!\\");\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\n## 16. Shell Script:\\r\\n### \\"Hello, world\\" Shell Script\\r\\n```bash\\r\\necho \\"Hello, World!\\"\\r\\n```\\r\\n## 17. R:\\r\\n### \\"Hello, world\\" R\\r\\n```r\\r\\ncat(\\"Hello, World!\\\\n\\")\\r\\n```\\r\\n## 18. Perl:\\r\\n### \\"Hello, world\\" Perl\\r\\n```perl\\r\\nprint \\"Hello, World!\\\\n\\";\\r\\n```\\r\\n## 19. Haskell:\\r\\n### \\"Hello, world\\" Haskell\\r\\n```haskell\\r\\nmain :: IO ()\\r\\nmain = putStrLn \\"Hello, World!\\"\\r\\n```\\r\\n## 20.Lua:\\r\\n### \\"Hello, world\\" Lua\\r\\n```lua\\r\\nprint(\\"Hello, World!\\")\\r\\n```"},{"id":"react-upload-anh-va-video-trong-rich-text-editor","metadata":{"permalink":"/en/blog/react-upload-anh-va-video-trong-rich-text-editor","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-12-22-react-quill-cloundinary/index.md","title":"React - Uploading Images and Videos in React Quill using Cloudinary","description":"Guide on using react-quill to create a rich text editor (WYSIWYG) and integrating Cloudinary for image storage in posts","date":"2023-12-22T00:00:00.000Z","formattedDate":"December 22, 2023","tags":[{"label":"react","permalink":"/en/blog/tags/react"},{"label":"javascript","permalink":"/en/blog/tags/javascript"},{"label":"nodejs","permalink":"/en/blog/tags/nodejs"}],"readingTime":5.1,"hasTruncateMarker":true,"authors":[{"name":"Ph\u1ea1m Quy\u1ebft Th\u1eafng","title":"Fullstack developer","url":"https://github.com/phamquyetthang","imageURL":"https://avatars.githubusercontent.com/u/43201625?s=400&u=9fa24ddfe492d15ba4692d4b295a5a2ef6b9ce24&v=4","key":"thang"}],"frontMatter":{"title":"React - Uploading Images and Videos in React Quill using Cloudinary","description":"Guide on using react-quill to create a rich text editor (WYSIWYG) and integrating Cloudinary for image storage in posts","slug":"react-upload-anh-va-video-trong-rich-text-editor","authors":["thang"],"tags":["react","javascript","nodejs"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Hello World in 20 Programming Languages","permalink":"/en/blog/hello-world-trong-20-ngon-ngu-lap-trinh-pho-bien"},"nextItem":{"title":"How to modify library in node module and save it forever","permalink":"/en/blog/lam-cach-nao-de-sua-doi-thu-vien-trong-node-module"}},"content":"### 1.Introduction:\\nIn the process of developing web applications or blogs, providing a rich text editor for users is a common requirement. This allows users to create, edit, and format their content flexibly and easily. One popular text editor in the programming community is React Quill, known for its high customization and easy integration into your React projects.\\n\\nHowever, allowing users to upload and insert images or videos into the text editor is not a simple task. Especially when you need to store and manage thousands of multimedia files. The solution is to use a powerful cloud image storage service like Cloudinary. Cloudinary allows you to store, upload, and manage images and videos efficiently, enhancing the functionality and performance of your application.\\n\\nIn this article, we will learn how to integrate React Quill with the Cloudinary image storage service to address this complex issue. Together, we will build an editor that enables users to conveniently and quickly upload and insert images and videos.\\n\\n* React Quill: An open-source text editor that allows users to create and edit content with various formats.\\n* Cloudinary: A powerful cloud storage service that supports easy management, uploading, and processing of images and videos.\\n\x3c!-- truncate --\x3e\\n### 2. Installing react-quill\\n* First, we need to initialize a React project using Vite or create-react-app.\\n```\\nyarn create vite react-quill-upload --template react-ts\\n```\\n* Install react-quill:\\n```\\nyarn add react-quill\\n```\\n* Import react-quill component:\\n```\\nimport React, { useState } from \'react\';\\nimport ReactQuill from \'react-quill\';\\nimport \'react-quill/dist/quill.snow.css\';\\n\\nfunction MyComponent() {\\n  const [value, setValue] = useState(\'\');\\n  const reactQuillRef = useRef<ReactQuill>(null);\\n\\n  return <ReactQuill ref={reactQuillRef} theme=\\"snow\\" value={value} onChange={setValue} />;\\n}\\n```\\n* To upload images in the quill editor, declare the image in the modules and formats section.\\n```\\n<ReactQuill\\n      ref={reactQuillRef}\\n      theme=\\"snow\\"\\n      placeholder=\\"Start writing...\\"\\n      modules={{\\n        toolbar: {\\n          container: [\\n            [{ header: \\"1\\" }, { header: \\"2\\" }, { font: [] }],\\n            [{ size: [] }],\\n            [\\"bold\\", \\"italic\\", \\"underline\\", \\"strike\\", \\"blockquote\\"],\\n            [\\n              { list: \\"ordered\\" },\\n              { list: \\"bullet\\" },\\n              { indent: \\"-1\\" },\\n              { indent: \\"+1\\" },\\n            ],\\n            [\\"link\\", \\"image\\", \\"video\\"],\\n            [\\"code-block\\"],\\n            [\\"clean\\"],\\n          ],\\n        },\\n        clipboard: {\\n          matchVisual: false,\\n        },\\n      }}\\n      formats={[\\n        \\"header\\",\\n        \\"font\\",\\n        \\"size\\",\\n        \\"bold\\",\\n        \\"italic\\",\\n        \\"underline\\",\\n        \\"strike\\",\\n        \\"blockquote\\",\\n        \\"list\\",\\n        \\"bullet\\",\\n        \\"indent\\",\\n        \\"link\\",\\n        \\"image\\",\\n        \\"video\\",\\n        \\"code-block\\",\\n      ]}\\n      value={value}\\n      onChange={onChange}\\n    />\\n```\\n* Now you will see the upload image icon on the toolbar of react-quill. Import and print the entire text content, and you will see that by default, react-quill saves your image as base-64:\\n![image.png](./1.webp)\\n\\n> => If using this default approach, we can store the image in the database as base-64. In the demo, I only use small-sized images. If the image size is larger, the base-64 string will be larger, consuming more memory.\\n\\n### 3. Handle upload image\\n* To avoid storing images in the text content as base-64, we need to integrate a cloud service and only store the image\'s link. Next, I will guide you on handling the upload action of react-quill and using Cloudinary to store it (you can do the same with any other cloud, e.g., Firebase Storage, ...).\\n* Add the imageHandler\\n```\\n <ReactQuill\\n      ref={reactQuillRef}\\n      theme=\\"snow\\"\\n      placeholder=\\"Start writing...\\"\\n      modules={{\\n        toolbar: {\\n          container: [\\n             ...\\n            [\\"link\\", \\"image\\", \\"video\\"],\\n            [\\"code-block\\"],\\n            [\\"clean\\"],\\n          ],\\n          handlers: {\\n            image: imageHandler,   // <- \\n          },\\n        },\\n        clipboard: {\\n          matchVisual: false,\\n        },\\n      }}\\n      ...\\n    />\\n```\\n\\n```\\n  const imageHandler = useCallback(() => {\\n    const input = document.createElement(\\"input\\");\\n    input.setAttribute(\\"type\\", \\"file\\");\\n    input.setAttribute(\\"accept\\", \\"image/*\\");\\n    input.click();\\n    input.onchange = async () => {\\n      if (input !== null && input.files !== null) {\\n        const file = input.files[0];\\n        console.log(file)\\n      }\\n    };\\n  }, []);\\n```\\n> Explanation: In the code above, I added a function to handle the image container of react-quill. In the imageHandler function, I create an input file element and trigger a click() to open the file import window. You can extend this part to open the cloudinary upload widget ( [read more](https://cloudinary.com/documentation/react_image_and_video_upload) ). **Using the widget is more secure and efficient because we can reuse previously uploaded images. If you have time and need, you should use that method!**\\n* Function to upload the image to Cloudinary:\\nThere are many ways to upload to Cloudinary, but I choose the simplest method of calling the API:\\n```\\nconst uploadToCloudinary = async (file: File): Promise<string> => {\\n  const formData = new FormData();\\n  formData.append(\\"file\\", file);\\n  formData.append(\\n    \\"upload_preset\\",\\n    import.meta.env.VITE_CLOUDINARY_PRESET\\n  );\\n  const res = await fetch(\\n    `https://api.cloudinary.com/v1_1/${\\n      import.meta.env.VITE_CLOUDINARY_NAME\\n    }/upload`,\\n    { method: \\"POST\\", body: formData }\\n  );\\n  const data = await res.json();\\n  const url = data.url;\\n\\n  return url\\n}\\n```\\n> Explanation: To upload an image to Cloudinary via the API, you need the Product Name and upload_preset, which you can obtain from the cloudinary settings page (set the upload_preset mode to Unsigned for simplicity; for enhanced security, you can use other cloudinary upload methods).\\n![image.png](./2.webp)\\n* Insert the image URL returned from Cloudinary into the text content.\\n```\\n  const imageHandler = useCallback(() => {\\n    const input = document.createElement(\\"input\\");\\n    input.setAttribute(\\"type\\", \\"file\\");\\n    input.setAttribute(\\"accept\\", \\"image/*\\");\\n    input.click();\\n    input.onchange = async () => {\\n      if (input !== null && input.files !== null) {\\n        const file = input.files[0];\\n        const url = await uploadToCloudinary(file);\\n        const quill = reactQuillRef.current;\\n        if (quill) {\\n          const range = quill.getEditorSelection();\\n          range && quill.getEditor().insertEmbed(range.index, \\"image\\", url);\\n        }\\n      }\\n    };\\n  }, []);\\n```\\n> Explanation: After obtaining the URL from uploading to Cloudinary, we need to assign it to the correct position of the corresponding img tag in the text content:\\n ```\\nconst range = quill.getEditorSelection();\\n range && quill.getEditor().insertEmbed(range.index, \\"image\\", url);\\n```\\n> This part is to determine the position of the img tag and assign it with the URL returned from Cloudinary (before this, use useRef to reference the ReactQuill component).\\n\\n* And here is the result, now the text content only contains the link of the image instead of base-64:\\n![image.png](./3.webp)\\n\\nYou can find the entire source code at: https://github.com/phamquyetthang/react-quill-image-upload\\n\\n\\n### 4. Conclusion\\nThis is my simple guide on handling image uploads in react-quill; you can do something similar with video uploads!\\n\\nYou can view the entire code of this tutorial on my GitHub: https://github.com/phamquyetthang/react-quill-image-upload\\n\\nI hope this article is helpful to you. Thank you for reading!\\n\\nIf you have any questions or comments, please leave them below."},{"id":"lam-cach-nao-de-sua-doi-thu-vien-trong-node-module","metadata":{"permalink":"/en/blog/lam-cach-nao-de-sua-doi-thu-vien-trong-node-module","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-12-22-sua-trong-node-module/index.md","title":"How to modify library in node module and save it forever","description":"Ways to Fix Errors in node_modules and Preserve Edits (Using patch-package, ...)","date":"2023-12-22T00:00:00.000Z","formattedDate":"December 22, 2023","tags":[{"label":"javascript","permalink":"/en/blog/tags/javascript"},{"label":"nodejs","permalink":"/en/blog/tags/nodejs"}],"readingTime":2.295,"hasTruncateMarker":true,"authors":[{"name":"Ph\u1ea1m Quy\u1ebft Th\u1eafng","title":"Fullstack developer","url":"https://github.com/phamquyetthang","imageURL":"https://avatars.githubusercontent.com/u/43201625?s=400&u=9fa24ddfe492d15ba4692d4b295a5a2ef6b9ce24&v=4","key":"thang"}],"frontMatter":{"title":"How to modify library in node module and save it forever","description":"Ways to Fix Errors in node_modules and Preserve Edits (Using patch-package, ...)","slug":"lam-cach-nao-de-sua-doi-thu-vien-trong-node-module","authors":["thang"],"tags":["javascript","nodejs"],"image":"https://images.viblo.asia/35468773-2fcb-4363-8ac0-52a6a00f2f07.jpg","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"React - Uploading Images and Videos in React Quill using Cloudinary","permalink":"/en/blog/react-upload-anh-va-video-trong-rich-text-editor"}},"content":"Ways to Fix Errors in node_modules and Preserve Edits (Using patch-package, ...)\\n## 1. When Fixing a Library from npm:\\nFor JavaScript enthusiasts, installing third-party libraries using the command `npm install <package name>` (or yarn) is a familiar routine.\\n\\nAfter installation, these libraries reside in the node_modules directory, and we can easily use them.\\n\\n![](./35468773-2fcb-4363-8ac0-52a6a00f2f07.jpg)\\n\\nWhat\'s inside the node_module is usually not something we need to know in detail. The node_module can sometimes be an untouchable area.\\n\\nDeleting the node_module and reinstalling is a spiritual solution many have used in desperation to fix bugs.\\n\\nIssues arise when we encounter a problem with a library but don\'t want to find an alternative.\\n\\n\x3c!-- truncate --\x3e\\n### So, how can we fix libraries ourselves without losing changes if we delete the node_module?\\n\\nHere are some approaches:\\n\\n## 2. Ways to Fix Libraries in node_modules\\n### Approach 1: Fork the Package\'s Repo\\nYou can go to the source code of the package, fork it to your own Git repository, make changes, and then edit it.\\n\\nAfterward, declare it in your package.json like this:\\nFor example:\\n![image.png](./072ae723-f94b-4da3-9802-17bd928bfb57.png)\\n\\nReplace the package version with the path to your repository in the format `git+{repo}`.\\n\\nYou may encounter some issues if you try to modify mega-packages like those from Facebook. Some packages are subdirectories of others.\\n\\nYou can go to https://gitpkg.vercel.app/, paste the link directly to the directory containing that package. The website will render a link and yarn (npm) command for you.\\n\\n(That\'s the theory, but whether it runs or not... To be sure, you can try approach 2.)\\n\\n### Approach 2: Use patch-package\\nThis approach is more direct than the first one.\\n\\nBoldly find the code in your node_module that you want to edit and bravely make the changes.\\n\\nThen run the command:\\n\\n`npx patch-package <package name>`\\n\\npatch-package will create a patches folder, declaring your changes.\\n\\nYou can push this folder to Git and run the `npx patch-package` command to reapply your changes.\\n\\nTo avoid one step each time you reinstall the project, you can add the line `\\"postinstall\\": \\"npx patch-package\\"` to the scripts like this to let node_module automatically render your changes every time you reinstall.\\n\\n![image.png](./ef048d12-b117-4597-8e6e-3de033978daa.png)\\n\\n## 3. Demo:\\nI have a small demo.\\n\\nIt involves changing the default logo of the metro in REACT-NATIVE.\\n\\nAfter some investigation, I found out it was written in a file named TerminalReporter.js in /node_modules/metro/src/lib.\\n\\nI thought there would be some complicated algorithms to print it out, like the C++ days at school, but no, it\'s just an array containing each line of #### :)))))\\n\\nSo, I just changed it.\\n\\nFrom:\\n\\n![image.png](./6dffe6ba-b46f-43a1-a235-d30d12bf7cfa.png)\\n\\nTo:\\n\\n![image.png](./adef09a3-5890-477a-92af-7c5c4dbc7118.png)\\n\\n(I did it during the deadline days, too busy, so I decided to spend a day messing around to relieve stress after finishing.)"}]}')}}]);